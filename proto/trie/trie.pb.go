// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/trie/trie.proto

package trie

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//字典树类型，这个字典树是那个功能搜索的
type TrieType struct {
	//记录id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//记录的描述
	TrieDescribe         string   `protobuf:"bytes,2,opt,name=trie_describe,json=trieDescribe,proto3" json:"trie_describe,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrieType) Reset()         { *m = TrieType{} }
func (m *TrieType) String() string { return proto.CompactTextString(m) }
func (*TrieType) ProtoMessage()    {}
func (*TrieType) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ee8518a7cefa5b4, []int{0}
}

func (m *TrieType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrieType.Unmarshal(m, b)
}
func (m *TrieType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrieType.Marshal(b, m, deterministic)
}
func (m *TrieType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrieType.Merge(m, src)
}
func (m *TrieType) XXX_Size() int {
	return xxx_messageInfo_TrieType.Size(m)
}
func (m *TrieType) XXX_DiscardUnknown() {
	xxx_messageInfo_TrieType.DiscardUnknown(m)
}

var xxx_messageInfo_TrieType proto.InternalMessageInfo

func (m *TrieType) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TrieType) GetTrieDescribe() string {
	if m != nil {
		return m.TrieDescribe
	}
	return ""
}

//搜索关键词请求
type KeySearchTrieRequest struct {
	//搜索字典的树
	TrieType *TrieType `protobuf:"bytes,1,opt,name=trie_type,json=trieType,proto3" json:"trie_type,omitempty"`
	//关键词
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	//关键词是否录取
	KeyEnroll            bool     `protobuf:"varint,3,opt,name=key_enroll,json=keyEnroll,proto3" json:"key_enroll,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeySearchTrieRequest) Reset()         { *m = KeySearchTrieRequest{} }
func (m *KeySearchTrieRequest) String() string { return proto.CompactTextString(m) }
func (*KeySearchTrieRequest) ProtoMessage()    {}
func (*KeySearchTrieRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ee8518a7cefa5b4, []int{1}
}

func (m *KeySearchTrieRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeySearchTrieRequest.Unmarshal(m, b)
}
func (m *KeySearchTrieRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeySearchTrieRequest.Marshal(b, m, deterministic)
}
func (m *KeySearchTrieRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeySearchTrieRequest.Merge(m, src)
}
func (m *KeySearchTrieRequest) XXX_Size() int {
	return xxx_messageInfo_KeySearchTrieRequest.Size(m)
}
func (m *KeySearchTrieRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KeySearchTrieRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KeySearchTrieRequest proto.InternalMessageInfo

func (m *KeySearchTrieRequest) GetTrieType() *TrieType {
	if m != nil {
		return m.TrieType
	}
	return nil
}

func (m *KeySearchTrieRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeySearchTrieRequest) GetKeyEnroll() bool {
	if m != nil {
		return m.KeyEnroll
	}
	return false
}

//搜索关键词提示响应
type KeySearchTrieResponse struct {
	KeyList              []string `protobuf:"bytes,1,rep,name=key_list,json=keyList,proto3" json:"key_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeySearchTrieResponse) Reset()         { *m = KeySearchTrieResponse{} }
func (m *KeySearchTrieResponse) String() string { return proto.CompactTextString(m) }
func (*KeySearchTrieResponse) ProtoMessage()    {}
func (*KeySearchTrieResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ee8518a7cefa5b4, []int{2}
}

func (m *KeySearchTrieResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeySearchTrieResponse.Unmarshal(m, b)
}
func (m *KeySearchTrieResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeySearchTrieResponse.Marshal(b, m, deterministic)
}
func (m *KeySearchTrieResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeySearchTrieResponse.Merge(m, src)
}
func (m *KeySearchTrieResponse) XXX_Size() int {
	return xxx_messageInfo_KeySearchTrieResponse.Size(m)
}
func (m *KeySearchTrieResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KeySearchTrieResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KeySearchTrieResponse proto.InternalMessageInfo

func (m *KeySearchTrieResponse) GetKeyList() []string {
	if m != nil {
		return m.KeyList
	}
	return nil
}

func init() {
	proto.RegisterType((*TrieType)(nil), "trie.TrieType")
	proto.RegisterType((*KeySearchTrieRequest)(nil), "trie.KeySearchTrieRequest")
	proto.RegisterType((*KeySearchTrieResponse)(nil), "trie.KeySearchTrieResponse")
}

func init() { proto.RegisterFile("proto/trie/trie.proto", fileDescriptor_9ee8518a7cefa5b4) }

var fileDescriptor_9ee8518a7cefa5b4 = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x50, 0x3d, 0x4e, 0xc3, 0x30,
	0x14, 0x56, 0x92, 0x0a, 0x92, 0x07, 0x54, 0xc8, 0x6a, 0x51, 0x28, 0x45, 0x8a, 0xc2, 0x12, 0x09,
	0xa9, 0x91, 0xc2, 0x01, 0x58, 0x60, 0x82, 0xc9, 0x74, 0xaf, 0x92, 0xe6, 0xa9, 0x98, 0x44, 0x71,
	0xb0, 0x1f, 0x83, 0x3b, 0x72, 0x05, 0x8e, 0xc6, 0x15, 0x38, 0x08, 0xb2, 0xd3, 0x32, 0xa0, 0x2e,
	0xd6, 0xf3, 0xe7, 0xef, 0xe7, 0xf9, 0x83, 0x69, 0xaf, 0x24, 0xc9, 0x9c, 0x94, 0x40, 0x77, 0x2c,
	0xdc, 0x9d, 0x8d, 0xec, 0x3c, 0x9b, 0x6f, 0xa4, 0xdc, 0xb4, 0x98, 0x97, 0xbd, 0xc8, 0xcb, 0xae,
	0x93, 0x54, 0x92, 0x90, 0x9d, 0x1e, 0x38, 0xe9, 0x3d, 0x84, 0x4b, 0x25, 0x70, 0x69, 0x7a, 0x64,
	0x63, 0xf0, 0x45, 0x1d, 0x7b, 0x89, 0x97, 0x05, 0xdc, 0x17, 0x35, 0xbb, 0x81, 0x33, 0xeb, 0xb0,
	0xaa, 0x51, 0xaf, 0x95, 0xa8, 0x30, 0xf6, 0x13, 0x2f, 0x8b, 0xf8, 0xa9, 0x05, 0x1f, 0x76, 0x58,
	0x4a, 0x30, 0x79, 0x42, 0xf3, 0x82, 0xa5, 0x5a, 0xbf, 0x5a, 0x27, 0x8e, 0xef, 0x1f, 0xa8, 0x89,
	0xdd, 0x42, 0xe4, 0xc4, 0x64, 0x7a, 0x74, 0x9e, 0x27, 0xc5, 0x78, 0xe1, 0x96, 0xdb, 0xe7, 0xf1,
	0x90, 0xf6, 0xc9, 0xe7, 0x10, 0x34, 0x68, 0x76, 0xfe, 0x76, 0x64, 0xd7, 0x00, 0x0d, 0x9a, 0x15,
	0x76, 0x4a, 0xb6, 0x6d, 0x1c, 0x24, 0x5e, 0x16, 0xf2, 0xa8, 0x41, 0xf3, 0xe8, 0x80, 0xb4, 0x80,
	0xe9, 0xbf, 0x54, 0xdd, 0xcb, 0x4e, 0x23, 0xbb, 0x84, 0xd0, 0xea, 0x5a, 0xa1, 0x29, 0xf6, 0x92,
	0x20, 0x8b, 0xf8, 0x71, 0x83, 0xe6, 0x59, 0x68, 0x2a, 0xde, 0x60, 0x64, 0xa9, 0xac, 0x82, 0xe8,
	0x4f, 0xcb, 0x66, 0xc3, 0x4e, 0x87, 0xbe, 0x30, 0xbb, 0x3a, 0xf8, 0x36, 0x04, 0xa5, 0xf3, 0xcf,
	0xef, 0x9f, 0x2f, 0xff, 0x82, 0x4d, 0xf2, 0x6d, 0x5b, 0x6f, 0x87, 0xee, 0x1b, 0x34, 0xda, 0x31,
	0xab, 0x23, 0xd7, 0xee, 0xdd, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x27, 0x48, 0x61, 0xc3, 0x9a,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TrieClient is the client API for Trie service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrieClient interface {
	//关键字提示搜索
	KeySearch(ctx context.Context, in *KeySearchTrieRequest, opts ...grpc.CallOption) (*KeySearchTrieResponse, error)
}

type trieClient struct {
	cc *grpc.ClientConn
}

func NewTrieClient(cc *grpc.ClientConn) TrieClient {
	return &trieClient{cc}
}

func (c *trieClient) KeySearch(ctx context.Context, in *KeySearchTrieRequest, opts ...grpc.CallOption) (*KeySearchTrieResponse, error) {
	out := new(KeySearchTrieResponse)
	err := c.cc.Invoke(ctx, "/trie.Trie/KeySearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrieServer is the server API for Trie service.
type TrieServer interface {
	//关键字提示搜索
	KeySearch(context.Context, *KeySearchTrieRequest) (*KeySearchTrieResponse, error)
}

// UnimplementedTrieServer can be embedded to have forward compatible implementations.
type UnimplementedTrieServer struct {
}

func (*UnimplementedTrieServer) KeySearch(ctx context.Context, req *KeySearchTrieRequest) (*KeySearchTrieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeySearch not implemented")
}

func RegisterTrieServer(s *grpc.Server, srv TrieServer) {
	s.RegisterService(&_Trie_serviceDesc, srv)
}

func _Trie_KeySearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeySearchTrieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrieServer).KeySearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trie.Trie/KeySearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrieServer).KeySearch(ctx, req.(*KeySearchTrieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Trie_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trie.Trie",
	HandlerType: (*TrieServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KeySearch",
			Handler:    _Trie_KeySearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/trie/trie.proto",
}
